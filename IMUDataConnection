#include <WiFi.h>
#include <WiFiUdp.h>
#include <elapsedMillis.h>
#include <Adafruit_BNO08x.h>

#define BNO08X_CS 10
#define BNO08X_INT 9

#define BNO08X_RESET -1

Adafruit_BNO08x  bno08x(BNO08X_RESET);
sh2_SensorValue_t sensorValue;

// char ssid[] = "NETGEAR92";           // Set your Wi-Fi SSID
// char password[] = "greatflower105";  // Set your Wi-Fi password
// int status = WL_IDLE_STATUS;         // Indicator of Wi-Fi status

char ssid[] = "meshmeshmesh";    // Set your Wi-Fi SSID
char password[] = "sparkyasu";    // Set your Wi-Fi password
int status = WL_IDLE_STATUS;        // Indicator of Wi-Fi status

WiFiUDP udp;
// const char* udpAddress = "192.168.0.8";  // IP address of the computer running Unity
const char* udpAddress = "192.168.1.76";  // IP address of the computer running Unity
const int udpPort = 4211;

// Adjust these pin numbers according to the Feather ESP32-S3 pinout
//const int buttonPin = 13;  // Example: Change this based on Feather ESP32-S3 pinout
//const int potPin = A0;     // Adjust if A0 is mapped differently on the ESP32-S3
//const int ledPin = 5;*

// sensor/data variables
//int ledBrightness;
//int buttonState;
//int potValue;
float posX, posY, posZ;  // position data from tracked Unity object

// timers
elapsedMillis sensorReadTimer;
elapsedMillis sendToUnityTimer;
elapsedMillis readFromUnityTimer;
elapsedMillis setActuatorsTimer;
elapsedMillis printTimer;

long sensorReadInterval = 40;
long sendToUnityInterval = 40;
long readFromUnityInterval = 40;
long setActuatorsInterval = 40;
long printInterval = 250;


void setup() {
  Serial.begin(115200);
  while (!Serial) delay(10);
  //pinMode(buttonPin, INPUT_PULLUP);
  //pinMode(potPin, INPUT);
  //pinMode(ledPin, OUTPUT);
  //connect to Wi-Fi network
  Serial.print("Connecting to Wi-Fi: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  // Wait for the connection to establish
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nWi-Fi connected.");
  printWifiData();

    Serial.println("Adafruit BNO08x test!");

  // Try to initialize!
  if (!bno08x.begin_I2C()) {
  //if (!bno08x.begin_UART(&Serial1)) {  // Requires a device with > 300 byte UART buffer!
  //if (!bno08x.begin_SPI(BNO08X_CS, BNO08X_INT)) {
    Serial.println("Failed to find BNO08x chip");
    while (1) { delay(10); }
  }
  Serial.println("BNO08x Found!");

  for (int n = 0; n < bno08x.prodIds.numEntries; n++) {
    Serial.print("Part ");
    Serial.print(bno08x.prodIds.entry[n].swPartNumber);
    Serial.print(": Version :");
    Serial.print(bno08x.prodIds.entry[n].swVersionMajor);
    Serial.print(".");
    Serial.print(bno08x.prodIds.entry[n].swVersionMinor);
    Serial.print(".");
    Serial.print(bno08x.prodIds.entry[n].swVersionPatch);
    Serial.print(" Build ");
    Serial.println(bno08x.prodIds.entry[n].swBuildNumber);
  }

  setReports();

  Serial.println("Reading events");
  delay(100);
}

// Here is where you define the sensor outputs you want to receive
void setReports(void) {
  Serial.println("Setting desired reports");
  if (! bno08x.enableReport(SH2_GAME_ROTATION_VECTOR)) {
    Serial.println("Could not enable game vector");
  }
}

void loop() {
  readSensorInput();
  sendDataToUnity();
  readDataFromUnity();
  setActuatorOutputs();
  printIncomingData();
}

void readFromIMU(){
  if (bno08x.wasReset()) {
      Serial.print("sensor was reset ");
      setReports();
    }
    
    if (! bno08x.getSensorEvent(&sensorValue)) {
      return;
    }
    
    switch (sensorValue.sensorId) {
      
      case SH2_GAME_ROTATION_VECTOR:
        Serial.print("Game Rotation Vector - r: ");
        Serial.print(sensorValue.un.gameRotationVector.real);
        Serial.print(" i: ");
        Serial.print(sensorValue.un.gameRotationVector.i);
        Serial.print(" j: ");
        Serial.print(sensorValue.un.gameRotationVector.j);
        Serial.print(" k: ");
        Serial.println(sensorValue.un.gameRotationVector.k);
        break;
    }

}


void readSensorInput() {
  if (sensorReadTimer >= sensorReadInterval) {
    sensorReadTimer = 0;
    //buttonState = digitalRead(buttonPin);
    //potValue = analogRead(potPin);
  }
}

void sendDataToUnity() {
  if (sendToUnityTimer >= sendToUnityInterval) {
    sendToUnityTimer = 0;
    readFromIMU();
    char packetBuffer[50];
    //sprintf(packetBuffer, "Button: %d, Pot: %d", buttonState, potValue);
    sprintf(packetBuffer,"");
    udp.beginPacket(udpAddress, udpPort);
    udp.write((uint8_t*)packetBuffer, strlen(packetBuffer));
    udp.endPacket();
  }
}

void readDataFromUnity() {
  if (readFromUnityTimer >= readFromUnityInterval) {
    int packetSize = udp.parsePacket();
    if (packetSize) {
      char packetBuffer[255];
      int len = udp.read(packetBuffer, 255);
      if (len > 0) {
        packetBuffer[len] = 0;
      }

      //Serial.println(packetBuffer); // Uncomment to display received position data

      // Parse position data
      sscanf(packetBuffer, "X:%f,Y:%f,Z:%f", &posX, &posY, &posZ);
    }
  }
}

void setActuatorOutputs() {
  if (setActuatorsTimer >= setActuatorsInterval) {
    /*setActuatorsTimer = 0;
    ledBrightness = abs((int)posY % 255);
    analogWrite(ledPin, ledBrightness);*/
  }
}

void printIncomingData() {
  if (printTimer >= printInterval) {
    printTimer = 0;
    Serial.print("Position - X: ");
    Serial.print(posX);
    Serial.print(" Y: ");
    Serial.print(posY);
    Serial.print(" Z: ");
    Serial.println(posZ);
  }
}
